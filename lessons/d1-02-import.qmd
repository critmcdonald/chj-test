---
title: "Importing & Cleaning"
author: "Christian McDonald"
---

## Goals of this lesson

This second lesson will look more like a traditional data project.

- We'll talk about libraries and functions
- We'll import some data to work with

Some code is pre-written with explanations of what it does. You'll also write your own code with mini quests.

Feel free to **Render** this document using the button above or *Cmd-shift-k*.

Every notebook you start should have a headline and text at the top, like this one, explaining the goal of what you are doing.

For this lesson we'll be using weather data -- daily temperature and precipitation readings -- to learn about using R and RStudio.

::: callout-tip
Within a project I typically have one notebook for downloading and cleaning my data, and then another notebook for analyzing my data. There are advantages we don't have time to get into, but know consistent project organization is important.
:::

## Packages and libraries

After the goals in a notebook, the next thing to have is the libraries you'll use. While there is a lot of functionality baked into R, users can also write and package pre-written code into libraries. Different libraries have different "functions" that we use to manipulate our data in some way. Learning these functions IS programming.

We almost always load the [tidyverse](https://www.tidyverse.org/) library which is actually a collection of libraries, including:

- [readr](https://readr.tidyverse.org/) has functions that import and export data
- [dplyr](https://dplyr.tidyverse.org/) functions manipulate data, like sorting and filtering
- [stringr](https://stringr.tidyverse.org/) helps us work with text
- [tidyr](https://tidyr.tidyverse.org/) helps us shape data for different purposes
- [ggplot](https://ggplot2.tidyverse.org/) helps us visualize data through charts

We'll use functions from all of these libraries, but they come in the one big toolbox, tidyverse.

Here is how we set up the library, and it is usually the first code chunk you'll have in your notebook. 

```{r}
#| label: setup
#| message: false

library(tidyverse)
```


1. Run the code block above using either the play button inside your Quarto document, or by placing your cursor in the code chunk and using *Cmd-shift-return* on your keyboard.

This code chunk has two special [execution options](https://quarto.org/docs/computations/execution-options.html) that affect how the code works. You can only see them inside the Quarto notebook; they do not display on the rendered page.

- `label: setup` gives this chunk a special name that tells RStudio to run this block before any other if it hasn't been run already.
- `message: false` suppresses the usual messages we see in our notebook after loading libraries. Usually we want to see these messages, but not on this chunk because they are standard. Plus, I wanted to show you how the options work.

Execution options are not required, but those two are useful for our libraries chunk. That's often the only place I use any.

## Functions

That `library()` command above is what we call a **function** in R, and it is similar to formulas in a spreadsheet. They are the "verbs" of R where all the action happens.

Inside the parenthesis of the function we add arguments, and the first argument is usually what data we are inserting into the function. There can be options to control the function.

`function(data, options = "value")`

We can also string these functions together, taking the result of one and piping it into the next function. We'll do that soon.

## Importing data

We use functions from the [readr](https://readr.tidyverse.org/) package to import our data. You choose which function to use based on the format of the data you are trying to import.

The data we have prepared for you here is in "csv" format, or comma separated values. Our notebook is stored inside a`lessons/` folder in our project, and our data is right next to it in `lessons/data/`. You can use the Files pane to see it.

Here, we import the `tx.csv` file to look at it.

```{r}
read_csv("data/tx.csv")
```

We get two outputs here:

- The R Console pane shows messages about our import
- The second pane shows our data

Like when we printed out our `cars` in the Introduction, we can see all number of observations and variables, along with their names and data types.

However, that data is only printing to our screen. It hasn't been saved and we can't reuse it. That's next.

## Objects

To save something in our R environment to reuse it, we create an "object". We name the object first, then use `<-` to fill it with our data. It's like you must have a bucket first before you can fill it with water.

1. Run the code chunk below

```{r}
tx <- read_csv("data/tx.csv")
```

- We still get messages about our input
- But instead of printing our data to the screen, we have saved it into `tx`.
- If you look at your **Environment** pane at the top-right of RStudio, you'll see your saved object listed there.

::: callout-tip
Normally we would not use two code chunks to read and then save our data. We would just edit the first chunk once we know our `read_csv()` was successful.
:::

### OYO: Import

Here I want you to import weather data from a different state and save it into an object. Look in the `lessons/data/` folder to see the files to choose from.

1. After these directions but before the next headline, add a new code chunk.
2. Use the `read_csv()` command to read in your data and run it to make sure it works.
3. Edit that same chunk to save your data into a new object. Make sure you see it in your **Environment** tab.
4. Add some notes in text to tell your future self what you've done.








### More about readr

There is a cheatsheet in the [readr documentation](https://readr.tidyverse.org/) that outlines functions to import different kinds of data. There are also options for things like skipping lines, renaming columns and other common challenges. 


## Piping and peeking

Now that we have data saved into our environment, let's talk about different ways to look at it.

We've already shown you can just run the object in a code block to see the first 1000 lines:

```{r}
tx
```

But we can also "pipe" our data into other functions to look at just part of it. 

Here we use the native R "pipe" command `|>` to take the result of `tx` and pass it to a function called `head()`.

```{r}
tx |> head()
```

### About the pipe \|\>

The pipe is a construct that takes the **result** of an object or function and passes it into another function. Think of it like a sentence that says **"AND THEN"** the next thing.

Like this:

``` r
I woke up |> 
  got out of bed |>
  dragged a comb across my head
```

You can't start a new line with a pipe. If you are breaking your code into multiple lines, then the `|>` needs to be at the end of a line and the next line should be indented so there is a visual clue it is related to line above it, like this:

``` r
tx |> 
  head()
```

It might look like there are no arguments inside `head()`, but what we are actually doing is passing the `tx` tibble into it like this: `head(tx)`. For almost every function in R the first argument is "what data are you taking about?" The pipe allows us to say "hey, take the data we just mucked with (i.e., the code before the pipe) and use that in this function."

Can can add other arguments to the new function. For instance, we can tell `head()` how many lines to print:

```{r}
tx |> head(20)
```


::: callout-tip
There is a keyboard command for the pipe `|>`: **Cmd+Shift+m**. Learn that one!
:::

### A rabbit dives into a pipe {.unnumbered}

The concept of the pipe was first introduced by tidyverse developers in 2014 in a package called [magrittr](https://magrittr.tidyverse.org/). They used the symbol `%>%` as the pipe. It was so well received the concept was written directly into base R in **2021**, but using the symbol `|>`. Hadley Wickham's 2022 rewriting of [R for Data Science](https://r4ds.hadley.nz/workflow-pipes.html#magrittr-and-the-pipe) uses the base R pipe `|>` by default. You can configure which to use in RStudio.

(This switch to `|>` is quite recent so you will see `%>%` used in our lectures and in documentation online. **Assume `|>` and `%>%` are interchangeable.** There is A LOT of code in the wild using the magrittr pipe `%>%`, so you'll find many references on Stack Overflow and elsewhere.)

## Glimpse

The `glimpse()` function allows you to look at your data in another way ... to see all the variables and their data types, no matter how many there are.

```{r}
tx |> glimpse()
```

This is super handy to have because you can see all your variable names in the same screen. I use it all the time.

### OYO: Peek at your data

I'd like you to use your own data set to use the `head()`, `glimpse()` functions and the `|>` operator.

1. In the space below these directions but before the next headline, add some text that you are looking at the top of your data, and then create code chunk and print the first 30 lines of your data.
2. After you've done that, add some text that you'll glimpse your data, then add a second code chunk and do just that.







## Select columns

Info about doing it. Example with Texas.

### OYO: Select

Directions to do on your own with another state.

## Export your data

### OYO: Write out your data




